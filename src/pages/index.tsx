import type { NextPage } from 'next';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { useDispatch, useSelector } from 'react-redux';
import {
  changeAddresseeInput,
  changeEmailInput,
  changePassword,
  initializeState,
} from '../store/modules/indexPage';
import { toggleGlobalLoading } from '../store/modules/common';
import { RootState } from '../store/modules';
import { useEffect, useRef } from 'react';
import T_index from '../Components/Templates/T_Index';
import axios from 'axios';

const Home: NextPage = () => {
  const dispatch = useDispatch();
  const router = useRouter();

  const { addresseeInputValue, emailInputValue, password } = useSelector(
    (state: RootState) => state.indexPage
  );

  const { globalLoading } = useSelector((state: RootState) => state.common);

  const focusInputRef = useRef<HTMLInputElement>(null);

  const submitHandler = () => {
    if (!addresseeInputValue || !emailInputValue || !password)
      return alert('全部入力してください');
    if (globalLoading) return;
    dispatch(toggleGlobalLoading(true));

    axios
      .post('/api/post', {
        addressee: addresseeInputValue.trim().replace(/[\s]{2,}/g, ' '),
        addresseeEmail: emailInputValue.trim(),
        password: password,
      })
      .then(({ data }) => {
        const { success, data: post } = data;

        if (!success) {
          dispatch(toggleGlobalLoading(false));

          return alert('生成に失敗しました。');
        }

        router.push(`/${post._id}`);
      })
      .catch(() => {
        dispatch(toggleGlobalLoading(false));
        alert('生成に失敗しました。');
      });
  };

  const inputHandler =
    (
      actionGenerator:
        | typeof changeAddresseeInput
        | typeof changeEmailInput
        | typeof changePassword
    ) =>
    (value: string) => {
      dispatch(actionGenerator(value));
    };

  useEffect(() => {
    if (focusInputRef.current !== null) {
      focusInputRef.current.focus();
    }

    dispatch(initializeState());

    return () => {
      dispatch(toggleGlobalLoading(false));
    };
  }, []);

  return (
    <div>
      {/* each page head setting for SEO */}
      <Head>
        <title>寄せ書きゼネレーター</title>
        <meta name='viewport' content='initial-scale=1, maximum-scale=1'></meta>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      {/* make instance of real page by template component*/}
      <T_index
        Props_O_IndexPageForm={{
          Props_M_LabeledInput_1: {
            Props_A_label: { text: '宛名', htmlFor: 'addressee' },
            Props_A_Input: {
              type: 'text',
              placeHolder: '宛名を入力してください',
              id: 'addressee',
              value: addresseeInputValue,
              onChangeHandler: inputHandler(changeAddresseeInput),
            },
          },
          Props_M_LabeledInput_2: {
            Props_A_label: { text: '宛名のemail', htmlFor: 'email' },
            Props_A_Input: {
              type: 'email',
              placeHolder: '宛名のe-mailを入力してください',
              id: 'email',
              onChangeHandler: inputHandler(changeEmailInput),
            },
          },
          Props_M_LabeledInput_3: {
            Props_A_label: {
              text: '管理用パスワード',
              htmlFor: 'adminPassword',
            },
            Props_A_Input: {
              type: 'password',
              placeHolder: '4桁の管理用パスワードを入力してください',
              id: 'adminPassword',
              onChangeHandler: inputHandler(changePassword),
              minMaxLength: { minLength: 4, maxLength: 4 },
            },
          },
          Props_A_Button: {
            value: '生成',
            type: 'submit',
          },
          submitHandler: submitHandler,
        }}
        Props_A_H1={{ text: '寄せ書きゼネレーター' }}
        Props_A_Video={{ src: '/video/main_video.mp4', loop: true }}
        ref={focusInputRef}
      />
    </div>
  );
};

export default Home;
